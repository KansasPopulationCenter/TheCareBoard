source("load_defaults.R")
# List of all ages from 0 to 85
age_list <- data.frame(age = seq(0, 85, by = 1))
# Load and clean the data
age_data <- read.csv("./data/CSV/ASECdata.csv") |>  # pipe
# Select/reorder columns
select(YEAR, AGE, ASECWT) |>  # pipe
clean_names()
source("load_defaults.R")
# Load asec formal care activities
asec <- read.csv("./data/CSV/ASECdata.csv") |>  # pipe
# Filter rows by conditions
filter(AGE >= 18) |>  # pipe
# Filter rows by conditions
filter(YEAR >= 2020) |>  # pipe
# Filter rows by conditions
filter(occ_care_focus != "none") |>  # pipe
# Filter rows by conditions
filter(empstat == "Employed") |>  # pipe
# Select/reorder columns
select(YEAR, OCC2010, occ_label, UHRSWORKT,
EARNWT, INCWAGE, occ_care_focus, ASECWT, STATEFIP) |>  # pipe
clean_names()
# clean up names
asec <- asec|>  # pipe
# Create or modify columns
mutate(
uhrsworkt = ifelse(uhrsworkt == 999, 0, uhrsworkt),
activity_id = str_replace_all(
occ_label, "[^a-zA-Z0-9]+", "-") |>  # pipe
str_to_lower(),
asecwt = asecwt/5,
activity_id = gsub("-$", "", activity_id)
) |>  # pipe
rename(
name = occ_label,
care_focus = occ_care_focus,
geo_level = statefip
)
gc()
# Loads packages, global options, and plotting theme(s)
# (Make sure load_defaults.R calls library(tidyverse), library(janitor), library(scales), etc.)
source("load_defaults.R")
# Create a complete single-year age index (0, 1, ..., 85)
# Note: age 80 ≡ ages 80–84; age 85 ≡ ages 85+ (see Overview above)
age_list <- data.frame(age = seq(0, 85, by = 1))
# Load latest ASEC microdata and keep only age and weight
age_data <- read.csv("./data/CSV/ASECdata.csv") |>
dplyr::filter(YEAR == max(YEAR)) |>
dplyr::select(AGE, ASECWT) |>
janitor::clean_names()
# ---- Aggregate to population by single-year age ----------------------------
# age_modified will contain one row per age (0–85) and the weighted population.
# The full_join ensures ages with no records appear with population = 0.
age_modified <- dplyr::full_join(
age_data |>
dplyr::group_by(age) |>
dplyr::summarise(population = sum(asecwt, na.rm = TRUE)),
by = "age"
) |>
dplyr::mutate(population = dplyr::coalesce(population, 0))
# ---- Aggregate to population by single-year age ----------------------------
# age_modified will contain one row per age (0–85) and the weighted population.
# The full_join ensures ages with no records appear with population = 0.
age_modified <- full_join(
age_list,
age_data |>
group_by(age) |>
summarise(population = sum(asecwt, na.rm = TRUE)),
by = "age"
) |>
mutate(population = coalesce(population, 0))
View(age_data)
# Create a complete single-year age index (0, 1, ..., 85)
# Note: age 80 ≡ ages 80–84; age 85 ≡ ages 85+ (see Overview above)
age_list <- data.frame(age = seq(0, 85, by = 1))
# Load latest ASEC microdata and keep only age and weight
age_data <- read.csv("./data/CSV/ASECdata.csv") |>
filter(YEAR == max(YEAR)) |>
select(AGE, ASECWT) |>
clean_names()
datatable(
age_data,
options = list(pageLength = 25, autoWidth = TRUE, scrollX = TRUE),
filter = "top"   # adds column-specific filters; global search is there by default
)
library(DT)
datatable(
age_data,
options = list(pageLength = 25, autoWidth = TRUE, scrollX = TRUE),
filter = "top"   # adds column-specific filters; global search is there by default
)
