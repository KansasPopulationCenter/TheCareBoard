---
title: "market_datum"
format: html
editor: visual
---

## Market Datum

### Setup

#### Initialize Final Dataframe

```{r}
source("load_defaults.R")

age_modified <- read.csv("./app_data/market.csv")

market_datum <- age_modified |> 
  cross_join(data.frame(care_focus = c("developmental", "daily_living", "health")))
```

#### Base ATUS setup

```{r}
atus <- read.csv("./data/CSV/ATUSdata.csv") %>%
  select(
    YEAR, CASEID, WT06, ACTLINE, HH_SIZE, AGE, marst, nchild, 
    activity, act_care_focus, occ_care_focus, 
    paid_work, child_care, elder_care, sleeping, 
    DURATION, SCC_ALL_LN, SEC_ALL_LN
    ) %>%
  clean_names() %>%
  filter(caseid != 20220402221228)

years_include <- atus|> 
  distinct(year) |> 
  filter(year != 2020) |> 
  arrange(desc(year)) |> 
  slice_head(n = 5) |> 
  pull()

atus <- atus |> 
  filter(year %in% years_include) |> 
  rename(care_focus = act_care_focus) |> 
  mutate(
    care_job = ifelse(occ_care_focus == "none", 0, 1),
    weight = wt06 / 365 / 5,
    work_time = duration * paid_work * care_job
    ) 
```

#### Incorporate Activity Relationship Data

```{r}
library(ipumsr)

ddi_file <- read_ipums_ddi("./data/IPUMS Pulls/atus_00026.xml")
atus_hh <- read_ipums_micro(ddi_file) |> 
  clean_names()

atus <- atus |> 
  left_join(
    atus_hh |>  select(caseid, actlinew, relatew),
    by = c("caseid" = "caseid", "actline" = "actlinew")
    )
```

#### Function for Data Overrides in Subsequent Steps

```{r}
prepare_overrides <- function(care_interval, age_ranges, col_name) {
  care_override <- do.call(rbind, lapply(names(care_interval), function(age_range) {
    data <- care_interval[[age_range]]
    
    df <- data.frame(
      age_range = age_range, 
      care_focus = names(data), 
      interval = as.numeric(data)
    )
    
    return(df)
  })) 
  
  care_override <- care_override |> 
    left_join(age_ranges, by = "age_range", relationship = "many-to-many") |> 
    select(age, care_focus, interval) |> 
    rename({{col_name}} := interval)
  
  return(care_override)
}
```

### Calculate Needs

#### Using ATUS Data

Calculate the amount of time an individual, who lives alone, spends on their own self care. Explicitly exclude time spent in child or elder care.

```{r}
age <- age_modified$age 
needs_atus_calc <- list()

for(a in age){
  data <- atus |> 
    group_by(caseid) |> 
    filter(all(scc_all_ln == 0)) |> 
    filter(all(sec_all_ln == 0)) |> 
    filter(all(child_care == 0)) |> 
    filter(all(elder_care == 0)) |> 
    ungroup() |> 
    filter(care_focus != "non-care") |> 
    filter(hh_size == 1) |> 
    filter(relatew == 100) |> 
    # 5-year lag group
    filter(age == a | age == a-1 | age == a+1 | age == a-2 | age == a+2)  
  
  # Estimates for each individual
  data <- data |> 
    reframe(
      duration = sum(duration, na.rm = TRUE),
      weight = first(weight),
      .by = c(care_focus, caseid)
    ) |> 
    reframe(
      need_interval = weighted.mean(duration, w = weight, na.rm = TRUE),
      .by = c(care_focus)
    ) |> 
    mutate(age = a)

  if (nrow(data) > 0) {
    needs_atus_calc[[a]] <- data
  }
}

needs_atus_calc <- bind_rows(needs_atus_calc)
```

#### KU Defined Overrides

```{r}
health_0to5 <- 300
develop_0to5 <- 420
daily_0to5 <- 1440 - health_0to5 - develop_0to5

health_6to12 <- 150
develop_6to12 <- 480
daily_6to12 <- 1440 - health_6to12 - develop_6to12

health_13to18 <- 90
develop_13to18 <- 360
daily_13to18 <- 1200 - health_13to18 - develop_13to18

health_75to84 <- 200
develop_75to84 <- 0
daily_75to84 <- 780 - health_75to84 - develop_75to84

health_85 <- 300
develop_85 <- 0
daily_85 <- 1200 - health_85 - develop_85

age_ranges <- bind_rows(
  expand.grid(age_range = "age_0to5", age = c(seq(0, 5, by = 1))),
  expand.grid(age_range = "age_6to12", age = c(seq(6, 12, by = 1))),
  expand.grid(age_range = "age_13to18", age = c(seq(13, 18, by = 1))),
  
  expand.grid(age_range = "age_75to84", age = c(seq(75, 84, by = 1))),
  expand.grid(age_range = "age_85", age = 85)
) 
  
need_interval <- list(
  age_0to5 = c("developmental" = develop_0to5, 
               "health" = health_0to5, "daily_living" = daily_0to5),
  
  age_6to12 = c("developmental" = develop_6to12, 
                "health" = health_6to12, "daily_living" = daily_6to12),
  
  age_13to18 = c("developmental" = develop_13to18, 
                 "health" = health_13to18, "daily_living" = daily_13to18), 
  
  age_75to84 = c("developmental" = develop_75to84, 
                 "health" = health_75to84, "daily_living" = daily_75to84),
  
  age_85 = c("developmental" = develop_85, 
             "health" = health_85, "daily_living" = daily_85)
)

needs_ku_override <- prepare_overrides(need_interval, age_ranges, "need_override")
```

### Calculate Provision

#### Using ATUS Data

```{r}
age <- age_modified$age 
provision_atus_calc <- list()

for(a in age){
  data <- bind_rows(
    # formal care work
    atus |>
      filter(activity == "Formal Work" & occ_care_focus != "none") |> 
      mutate(
        care_focus = occ_care_focus, 
        duration = duration 
        ),
    
    # informal care 
    atus |> filter(care_focus != "non-care"),

    # secondary child care - remove double counting
    atus |> 
      filter(scc_all_ln > 0) |>
      filter(!(activity == "Formal Work" & occ_care_focus != "none")) |> 
      filter(!(care_focus != "non-care")) |> 
      filter(sec_all_ln == 0) |>
      mutate(
        care_focus = "developmental",
        duration = scc_all_ln
        ),
    
    # secondary elder care - remove double counting
    atus |> 
      filter(sec_all_ln > 0) |>
      filter(!(activity == "Formal Work" & occ_care_focus != "none")) |> 
      filter(!(care_focus != "non-care")) |> 
      filter(scc_all_ln == 0) |>      
      mutate(
        care_focus = "health", 
        duration = sec_all_ln
        )
    )
  
  data <- data|> 
    filter(age %in% c(a-2, a-1, a, a+1, a+2)) %>%
    reframe(
      duration = sum(duration, na.rm = TRUE),
      weight = first(weight),
      .by = c(caseid, care_focus)
      ) %>%
    reframe( 
      provision_interval = wtd.quantile(
        duration, weights = weight, probs = 0.5, normwt = FALSE), 
      .by = care_focus
      ) |> 
    mutate(age = a)

  if (nrow(data) > 0) {
    provision_atus_calc[[a]] <- data
  }
}

provision_atus_calc <- bind_rows(provision_atus_calc)
```

#### KU Defined Overrides

```{r}
health_0to18 <- 0
develop_0to18 <- 0
daily_0to18 <- 0

health_85 <- 0
develop_85 <- 0
daily_85 <- 0

provision_interval <- list(
  age_0to18 = c("developmental" = develop_0to18, 
               "health" = health_0to18, "daily_living" = daily_0to18),
  
  age_85 = c("developmental" = develop_85, 
             "health" = health_85, "daily_living" = daily_85)
)

age_ranges <- bind_rows(
  expand.grid(age_range = "age_0to18", age = c(seq(0, 18, by = 1))),
  expand.grid(age_range = "age_85", age = 85)
) 

provision_ku_override <- prepare_overrides(provision_interval, age_ranges, "provision_override")
```

### Finalize Market Datum

#### Combine Need and Provision

```{r}
df_list <- list(
  market_datum,
  needs_atus_calc, 
  needs_ku_override, 
  provision_atus_calc, 
  provision_ku_override
) 

market_datum2 <- reduce(df_list, full_join, by = c("age", "care_focus")) |> 
  mutate(
    need_interval = coalesce(need_override, need_interval, 0),
    provision_interval = coalesce(provision_override, provision_interval, 0)
  ) |> 
  select(age, care_focus, need_interval, provision_interval)
```

#### Plot Initial Market

```{r}
plot_market <- function(df){
  df_total <- df |> 
    group_by(age) |> 
    summarise(
      total_need = sum(need_interval)/60, 
      total_provision = -sum(provision_interval)/60
      )
  
    need <- comma(round(sum(df_total$total_need)))
    provision <- comma(round(sum(df_total$total_provision)))
    sel_title <- paste0("total need: ", need, "  total provision: ", provision)
  

  p <- ggplot(data = df_total, aes(x = age)) +
    geom_col(aes(y = total_need), fill = "grey") +
    geom_col(aes(y = total_provision), fill = "steelblue") +
    theme_minimal() +
    theme(axis.title = element_blank()) +
    ggtitle(sel_title)
  
  print(p)
}

plot_market(market_datum2)
```

#### Smoothing Function

```{r}
#Define function for smoothing while keeping within bounds
smooth_data <- function(df) {
  df %>%
    group_by(care_focus) %>%
    arrange(age) %>%  
    mutate(
      smoothed_need = predict(
        loess(need_interval ~ age, data = cur_data(), span = 0.2), 
        newdata = data.frame(age = age)), 
      min_val_need = min(need_interval, na.rm = TRUE),
      max_val_need = max(need_interval, na.rm = TRUE),
      smoothed_need = pmax(pmin(smoothed_need, max_val_need), min_val_need), 

      smoothed_prov = predict(
        loess(provision_interval ~ age, data = cur_data(), span = 0.3), 
        newdata = data.frame(age = age)), 
      min_val_prov = min(provision_interval, na.rm = TRUE),
      max_val_prov = max(provision_interval, na.rm = TRUE),
      smoothed_prov = pmax(pmin(smoothed_prov, max_val_prov), min_val_prov) 
    ) %>%
    ungroup()
}

# Apply smoothing function to your dataset
market_datum_smoothed <- smooth_data(market_datum2) %>%
  select(age, care_focus, smoothed_need, smoothed_prov) %>%
  rename("need_interval" = smoothed_need) %>%
  rename("provision_interval" = smoothed_prov)

plot_market(market_datum_smoothed)
```

#### Final Overrides

##### Needs

```{r}
health_0to5 <- 300
develop_0to5 <- 420
daily_0to5 <- 1440 - health_0to5 - develop_0to5

health_6to12 <- 150
develop_6to12 <- 480
daily_6to12 <- 1440 - health_6to12 - develop_6to12

#health_85 <- 300
#develop_85 <- 0
#daily_85 = 1200 - health_85 - develop_85

need_interval <- list(
  age_0to5 = c("developmental" = develop_0to5, 
               "health" = health_0to5, "daily_living" = daily_0to5),
  
  age_6to12 = c("developmental" = develop_6to12, 
                "health" = health_6to12, "daily_living" = daily_6to12)
)
  
#  age_85 = c("developmental" = develop_85, 
#             "health" = health_85, "daily_living" = daily_85)
#)

age_ranges <- bind_rows(
  expand.grid(age_range = "age_0to5", age = c(seq(0, 5, by = 1))),
  expand.grid(age_range = "age_6to12", age = c(seq(6, 12, by = 1))))
              
              
              
  expand.grid(age_range = "age_85", age = 85)
) 

final_need_override <- prepare_overrides(need_interval, age_ranges, "need_override")
```

##### Provision

```{r}
no_provision <- 0

age_ranges <- bind_rows(
  expand.grid(age_range = "age_0to5", age = c(seq(0, 5, by = 1)))
) 

provision_interval <- list(
  age_0to5 = c("developmental" = no_provision, 
               "health" = no_provision, "daily_living" = no_provision)
)

final_provision_override <- prepare_overrides(provision_interval, age_ranges, "provision_override")
```

##### Care Market

```{r}
df_list <- list(
  market_datum_smoothed,
  final_need_override,
  final_provision_override
) 

final_market_datum <- reduce(df_list, full_join, by = c("age", "care_focus")) |> 
  mutate(
    need_interval = coalesce(need_override, need_interval, 0),
    provision_interval = coalesce(provision_override, provision_interval, 0)
  ) |> 
  select(age, care_focus, need_interval, provision_interval) |> 
  arrange(age, care_focus)

plot_market(final_market_datum)

write.csv(final_market_datum, "./app_data/market_datum.csv", row.names = FALSE)
```
