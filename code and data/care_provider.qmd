---
title: "care_provider"
format: html
editor: visual
---

### Purpose

This code chunk (chunk_01) performs a specific step in the workflow. Below is a high-level explanation of what it is doing, followed by inline comments in the code.

```{r}
source("load_defaults.R")
```

## Formal Hours

```{r}
# Load asec formal care activities
asec <- read.csv("./data/CSV/ASECdata.csv")  |>  # pipe to next step
  # Filter rows based on conditions
filter(YEAR == max(YEAR))  |>  # pipe to next step  
  # Filter rows based on conditions
filter(AGE >= 18)  |>  # pipe to next step 
  # Select subset of columns
select(YEAR, OCC2010, empstat, occ_label, UHRSWORKT, EARNWT, INCWAGE, 
         occ_care_focus, ASECWT, sex, gender_parent, poverty, empstat, race_ethnicity, prime_age, STATEFIP)  |>  # pipe to next step 
  clean_names() 
  

# create columns required by the app
cp_formal_state <- asec  |>  # pipe to next step 
  # Filter rows based on conditions
filter(empstat == "Employed")  |>  # pipe to next step
  # Create or modify columns
mutate(
    gender = str_to_lower(sex), 
    provider_status = case_when(
      gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
      gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
      TRUE ~ "other"
    ), 
    time_use = ifelse(occ_care_focus == "none", "non_care", "care"),
    care_focus = occ_care_focus,
    care_type	= "formal", 
    provider_attention = "active",
    geo_level = statefip,
    race = race_ethnicity
  ) 

cp_pop <- asec  |>  # pipe to next step 
  # Create or modify columns
mutate(
    gender = str_to_lower(sex), 
    provider_status = case_when(
      gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
      gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
      TRUE ~ "other"
    ), 
    time_use = ifelse(occ_care_focus == "none", "non_care", "care"),
    care_focus = occ_care_focus,
    care_type	= "formal", 
    provider_attention = "active",
    geo_level = statefip,
    race = race_ethnicity
  ) 

cp_summary <- cp_formal_state %>%
  # Filter rows based on conditions
filter(uhrsworkt != 997)  |>  # pipe to next step 
  # Create or modify columns
mutate(uhrsworkt = ifelse(uhrsworkt == 999, 0, uhrsworkt))  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    provision_interval = sum(uhrsworkt/7*60*asecwt), 
    .by = c(geo_level, gender, provider_status, time_use, care_type, 
            care_focus, provider_attention)
  )

cp_summary$geo_level <- sprintf("%02d", as.numeric(cp_summary$geo_level))
cp_summary$geo_level <- paste0("state", cp_summary$geo_level)

population_df <- cp_pop  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    population = sum(asecwt),
    .by = c(geo_level, gender, provider_status)
  )

population_df$geo_level <- sprintf("%02d", as.numeric(population_df$geo_level))
population_df$geo_level <- paste0("state", population_df$geo_level)

cp_formal_state <- cp_summary  |>  # pipe to next step 
  # Join datasets using left_join
left_join(population_df, by = c("geo_level", "gender", "provider_status"))


cp_formal_nation <- asec  |>  # pipe to next step 
  # Filter rows based on conditions
filter(empstat == "Employed")  |>  # pipe to next step
  # Create or modify columns
mutate(
    gender = str_to_lower(sex), 
    provider_status = case_when(
      gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
      gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
      TRUE ~ "other"
    ), 
    time_use = ifelse(occ_care_focus == "none", "non_care", "care"),
    care_focus = occ_care_focus,
    care_type	= "formal", 
    provider_attention = "active",
    geo_level = "national",
    race = race_ethnicity
  ) 

cp_pop <- asec  |>  # pipe to next step 
  # Create or modify columns
mutate(
    gender = str_to_lower(sex), 
    provider_status = case_when(
      gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
      gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
      TRUE ~ "other"
    ), 
    time_use = ifelse(occ_care_focus == "none", "non_care", "care"),
    care_focus = occ_care_focus,
    care_type	= "formal", 
    provider_attention = "active",
    geo_level = "national",
    race = race_ethnicity
  ) 

# # Aggregate data to compute summary statistics
#summarise formal stats
cp_summary <- cp_formal_nation %>%
  # Filter rows based on conditions
filter(uhrsworkt != 997)  |>  # pipe to next step 
  # Create or modify columns
mutate(uhrsworkt = ifelse(uhrsworkt == 999, 0, uhrsworkt))  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    provision_interval = sum(uhrsworkt/7*60*asecwt), 
    .by = c(geo_level, gender, provider_status, time_use, care_type, 
            care_focus, provider_attention)
  )

population_df <- cp_pop  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    population = sum(asecwt),
    .by = c(gender, provider_status)
  )

cp_formal_nation <- cp_summary  |>  # pipe to next step 
  # Join datasets using left_join
left_join(population_df, by = c("gender", "provider_status"))

cp_formal <- rbind(cp_formal_state, cp_formal_nation)
```

## Informal Hours

```{r}
atus <- read.csv("./data/CSV/ATUSdata.csv")  |>  # pipe to next step 
  # Filter rows based on conditions
filter(activity != "Formal Work")  |>  # pipe to next step 
  # Filter rows based on conditions
filter(AGE >= 18)  |>  # pipe to next step
  # Filter rows based on conditions
filter(YEAR >= 2019 & YEAR != 2020)  |>  # pipe to next step 
  # Select subset of columns
select(YEAR, CASEID, WT06, sex, gender_parent, race_ethnicity, act_care_focus, 
         DURATION, SCC_ALL_LN, SEC_ALL_LN, STATEFIP)  |>  # pipe to next step 
  clean_names() 

# get most recent 5 year and clean up columns
yr_range <- atus_yr_range(atus)  |>  # pipe to next step 
  # Filter rows based on conditions
filter(year == max(year))

# prep secondary care time
cp_informal <- atus  |>  # pipe to next step 
  pivot_longer(
    cols = c(duration, scc_all_ln, sec_all_ln), 
    names_to = "metric", 
    values_to = "duration"
  )  |>  # pipe to next step 
  # Filter rows based on conditions
filter(!is.na(duration)) 

# create columns required by the app
cp_informal_state <- cp_informal  |>  # pipe to next step 
  # Create or modify columns
mutate(
    gender = str_to_lower(sex), 
    provider_status = case_when(
      gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
      gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
      TRUE ~ "other"
    ), 
    care_type	= "informal", 
    provider_attention = case_when(
      metric == "scc_all_ln" ~ "passive_child", 
      metric == "sec_all_ln" ~ "passive_elder",
      TRUE ~ "active"
    ), 
    care_focus = case_when(
      metric == "scc_all_ln" ~ "developmental", 
      metric == "sec_all_ln" ~ "health",
      act_care_focus == "non-care" ~ "none", 
      TRUE ~ act_care_focus
    ), 
    time_use = ifelse(care_focus == "none", "non_care", "care"),
    weight = wt06/365/5,
    geo_level = statefip,
    race = race_ethnicity
  ) 

cp_informal_state <- cp_informal_state %>%
  # Filter rows based on conditions
filter(duration != 0)

# # Aggregate data to compute summary statistics
#summarise informal stats
cp_summary <- cp_informal_state  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    total_time = sum(duration),
    weight = median(weight),
    .by = c(year, caseid, geo_level, gender, provider_status, time_use, 
            care_type, care_focus, provider_attention)
  )  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    provision_interval = sum(total_time*weight),
    .by = c(geo_level, gender, provider_status, time_use, 
            care_type, care_focus, provider_attention)
  )

cp_summary$geo_level <- sprintf("%02d", as.numeric(cp_summary$geo_level))
cp_summary$geo_level <- paste0("state", cp_summary$geo_level)

cp_pop <- cp_informal_state %>%
  # Group data by specified variables
group_by(caseid) %>%
  # Aggregate data to compute summary statistics
summarise(
    weight = median(weight),
    geo_level = first(geo_level),
    gender = first(gender),
    provider_status = first(provider_status)
  )


population_df <- cp_pop  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    population = sum(weight),
    .by = c(geo_level, gender, provider_status)
  )

population_df$geo_level <- sprintf("%02d", as.numeric(population_df$geo_level))
population_df$geo_level <- paste0("state", population_df$geo_level)

cp_informal_state <- cp_summary  |>  # pipe to next step 
  # Join datasets using left_join
left_join(population_df, by = c("geo_level", "gender", "provider_status"))

# NATAIONAL

# create columns required by the app
cp_informal_nation <- cp_informal  |>  # pipe to next step 
  # Create or modify columns
mutate(
    gender = str_to_lower(sex), 
    provider_status = case_when(
      gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
      gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
      TRUE ~ "other"
    ), 
    care_type	= "informal", 
    provider_attention = case_when(
      metric == "scc_all_ln" ~ "passive_child", 
      metric == "sec_all_ln" ~ "passive_elder",
      TRUE ~ "active"
    ), 
    care_focus = case_when(
      metric == "scc_all_ln" ~ "developmental", 
      metric == "sec_all_ln" ~ "health",
      act_care_focus == "non-care" ~ "none", 
      TRUE ~ act_care_focus
    ), 
    time_use = ifelse(care_focus == "none", "non_care", "care"),
    weight = wt06/365/5,
    geo_level = "national",
    race = race_ethnicity
  ) 

cp_informal_nation <- cp_informal_nation %>%
  # Filter rows based on conditions
filter(duration != 0)

# # Aggregate data to compute summary statistics
#summarise formal stats
cp_summary <- cp_informal_nation  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    total_time = sum(duration),
    weight = median(weight),
    .by = c(year, caseid, weight, geo_level, gender, provider_status, time_use, 
            care_type, care_focus, provider_attention)
  )  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    provision_interval = sum(total_time*weight),
    .by = c(geo_level, gender, provider_status, time_use, 
            care_type, care_focus, provider_attention)
  )

cp_pop <- cp_informal_nation %>%
  # Group data by specified variables
group_by(caseid) %>%
  # Aggregate data to compute summary statistics
summarise(
    weight = median(weight),
    geo_level = first(geo_level),
    gender = first(gender),
    provider_status = first(provider_status)
  )


population_df <- cp_pop  |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(
    population = sum(weight),
    .by = c(gender, provider_status)
  )

cp_informal_nation <- cp_summary  |>  # pipe to next step 
  # Join datasets using left_join
left_join(population_df, by = c("gender", "provider_status"))

cp_informal <- rbind(cp_informal_state, cp_informal_nation)


```

## Output Required Files

```{r}
cp_combined <- bind_rows(
  cp_formal, 
  cp_informal
)  |>  # pipe to next step 
  arrange(care_type, time_use, gender, provider_status, care_focus) %>%
  # Select subset of columns
select(geo_level, gender, provider_status, time_use, care_type,
         care_focus, provider_attention, provision_interval, population) %>%
  rename(geo = geo_level)%>%
  # Filter rows based on conditions
filter(population != "null")

write.csv(cp_combined, "./app_data/care_provider_datum.csv", 
          row.names = FALSE)
```

```{r}
cp_population <- asec  |>  # pipe to next step 
  # Create or modify columns
mutate(
    gender = str_to_lower(sex),
    geo = statefip,
    provider_status = case_when(
      gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
      gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
      TRUE ~ "other")
    ) |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(population = sum(asecwt), .by = c(geo, gender, provider_status))  |>  # pipe to next step 
  arrange(gender, provider_status)

cp_population$geo <- sprintf("%02d", as.numeric(cp_population$geo))
cp_population$geo <- paste0("state", cp_population$geo)

### NATIONAL LEVEL

cp_population_national <- asec  |>  # pipe to next step 
  # Create or modify columns
mutate(
    gender = str_to_lower(sex),
    geo = statefip,
    provider_status = case_when(
      gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
      gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
      TRUE ~ "other")
    ) |>  # pipe to next step 
  # Aggregate data to compute summary statistics
summarise(population = sum(asecwt), .by = c(gender, provider_status))  |>  # pipe to next step 
  arrange(gender, provider_status)  |>  # pipe to next step
  # Create or modify columns
mutate(geo = "national")

cp_population <- rbind(cp_population, cp_population_national)

write.csv(cp_population, "./app_data/care_provider_population.csv", 
          row.names = FALSE)
```
