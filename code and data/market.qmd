---
title: "market"
format: html
editor: visual
---

# Overview

The country's current age distribution represents the care market's baseline demand by life stage. Understanding the shape of age profiles can help forecast shifts in service needs over time.

We will use the ASEC data to inform this distribution. Due to privacy and sample sizes: - age 80 represents individuals 80–84 years old - age 85 represents individuals 85 years and older.

## Load Defaults — Setup

This chunk loads shared defaults (packages, themes, helper options) used throughout the project. It expects `load_defaults.R` to attach packages such as **tidyverse**, **janitor**, **ggplot2**, and **scales** that are used below.

```{r setup, message=FALSE, warning=FALSE}
# Loads packages, global options, and plotting theme(s)
# (Make sure load_defaults.R calls library(tidyverse), library(janitor), library(scales), etc.)
source("load_defaults.R")
library(DT)
```

## Load and Prepare Current-Year ASEC data

This section constructs a full single‑year age index (0–85+) and then loads the most recent ASEC microdata snapshot. It filters to the latest `YEAR`, selects only the variables needed for weighting, aggregates person weights to get population by age, performs a complete join with the full age index to include ages with no records (filling them as zero), and finally writes a clean CSV used by the app.

### Compile the Blank Age List

This chunk creates a list of ages 0-85, which will represent the ages that we can loop through to make the estimations for each age.

```{r prepare_data, message=FALSE, warning=FALSE}
# Create a complete single-year age index (0, 1, ..., 85)
# Note: age 80 ≡ ages 80–84; age 85 ≡ ages 85+ (see Overview above)
age_list <- data.frame(age = seq(0, 85, by = 1))
```

### Load ASEC data

This chunk loads the **ASEC** data, subsets it to the current year, selects the needed variables, and cleans the variables to allow standardized names.

```{r Load data, message=FALSE, warning=FALSE}
# Load latest ASEC microdata and keep only age and weight
age_data <- read.csv("./data/CSV/ASECdata.csv") |>
  filter(YEAR == max(YEAR)) |>
  select(AGE, ASECWT) |>
  clean_names()
```

### Create Population Estimates

This chunk uses the **ASEC** data and the list of needed estimations to summarise the data. This chunk calculates the population of each age group by utilizing the variable **asecwt,** which is the weight of the observation. For each age in the **age_list** vector, we sum the **asecwt** variable for all observations in that group to get a nationally representative estimate of the population of people that age.

```{r Summarise Data, message=FALSE, warning=FALSE}
# age_modified will contain one row per age (0–85) and the weighted population.
# The full_join ensures ages with no records appear with population = 0.
age_modified <- full_join(
  age_list,
  age_data |>
    group_by(age) |>
    summarise(population = sum(asecwt, na.rm = TRUE)),
  by = "age"
) |>
  mutate(population = coalesce(population, 0))
```

## Write data

Finally, we write the data into the app_data folder, which is used to load this data into the app.

```{r Write Data, message=FALSE, warning=FALSE}
# Save processed data for the app
write.csv(age_modified, "./app_data/market.csv", row.names = FALSE)
```

### View Data

The plot below shows the distribution of the estimations of age within our data.

```{r view_plot, message=FALSE, warning=FALSE, fig.width=8, fig.height=4}
# Plot a simple age distribution from a data frame with columns `age` and `population`
plt_dist <- function(df) {
  p <- ggplot() +
    geom_col(
      data = df,
      aes(x = age, y = population)
    ) +
    theme_minimal() +
    theme(axis.title = element_blank()) +
    scale_y_continuous(labels = scales::comma) +
    ggtitle(label = paste(
      "total population:",
      scales::comma(sum(age_modified$population))
    ))

  return(p)
}

# Render the plot
plt_dist(age_modified)
```
