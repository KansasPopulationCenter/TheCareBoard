---
title: "gini â€” annotated"
format:
  html:
    toc: true
    toc-depth: 3
    code-overflow: wrap
    df-print: paged
execute:
  warning: false
  message: false
  echo: true
editor: visual
date: 2025-08-07
---

# Methods Overview

## Step 1

```{r step_1_01, message=FALSE, warning=FALSE}
library(dplyr)
library(DescTools)
library(lctools)
library(tidycensus)
library(tidyr)
library(doParallel)
library(foreach)
library(maps)
library(lehdr)
library(tidyverse)
```

## This pulls the GINI Data

```{r this_pulls_the_gini_data_02, message=FALSE, warning=FALSE}
## This pulls the GINI Data
```

## Define parameters

```{r define_parameters_03, message=FALSE, warning=FALSE}
# Define parameters
states <- c("al", "ak", "az", "ar", "ca", "co", "ct", "de", "fl", "ga",
            "hi", "id", "il", "in", "ia", "ks", "ky", "la", "me", "md",
            "ma", "mi", "mn", "ms", "mo", "mt", "ne", "nv", "nh", "nj",
            "nm", "ny", "nc", "nd", "oh", "ok", "or", "pa", "ri", "sc",
            "sd", "tn", "tx", "ut", "vt", "va", "wa", "wv", "wi", "wy")

years <- 2002:2022
```

## Lookup for renaming industries

```{r lookup_for_renaming_industries_04, message=FALSE, warning=FALSE}
# Lookup for renaming industries
industry_lookup <- c(
  CNS15 = "Educational Services",
  CNS16 = "Health Care",
  CNS18 = "Accommodation & Food Services"
)
```

## Storage list

```{r storage_list_05, message=FALSE, warning=FALSE}
# Storage list
all_data <- list()

for (state in states) {
  for (year in years) {
    message("Processing: ", state, " - ", year)
    try({
      wac <- grab_lodes(
        state = state,
        year = year,
        lodes_type = "wac",
        job_type = "JT00",
        segment = "S000",
        state_part = "main",
        agg_geo = "block"
      )
```

## Create total employment column from all CNS columns

```{r create_total_employment_column_from_all_cns_columns_06, message=FALSE, warning=FALSE}
# Create total employment column from all CNS columns
      wac <- wac %>%  # pipe
# Create or modify columns
mutate(total_employment = rowSums(select(., starts_with("CNS")), na.rm = TRUE))
```

## Subset and rename selected industries

```{r subset_and_rename_selected_industries_07, message=FALSE, warning=FALSE}
# Subset and rename selected industries
      filtered <- wac %>%  # pipe
# Select/reorder columns
select(w_geocode, year, total_employment, all_of(names(industry_lookup))) %>%  # pipe
        rename_with(~ industry_lookup[.x], .cols = names(industry_lookup)) %>%  # pipe
# Create or modify columns
mutate(state = state)
      
      all_data[[paste(state, year, sep = "_")]] <- filtered
    }, silent = TRUE)
  }
}
```

## Combine all

```{r combine_all_08, message=FALSE, warning=FALSE}
# Combine all
df <- bind_rows(all_data) %>%  # pipe  
  rename(BlockGEOID= w_geocode, State=state)
```

## This pulls the Population Data

```{r this_pulls_the_population_data_09, message=FALSE, warning=FALSE}
## This pulls the Population Data


years <- c(2009:2022) #2009 
# Initialize an empty dataframe to store results
conus_states <- state.abb

total_pop_data <- data.frame()
# Loop through each year and state
for (year in years) {
  for (state_code in  state.abb) {
    message(paste("Fetching data for", state_code, "in", year))
```

## Try to fetch the data (wrap in tryCatch in case a year/state has issues)

```{r try_to_fetch_the_data_wrap_in_trycatch_in_case_a_year_state_has_issues_10, message=FALSE, warning=FALSE}
# Try to fetch the data (wrap in tryCatch in case a year/state has issues)
    tryCatch({
      totalpop <- get_acs(
        geography = "tract", 
        variables = "B01001_001E", 
        state = state_code,
        year = year, 
        survey = "acs5", 
        output = "wide"
      )
```

## Add year and state as columns

```{r add_year_and_state_as_columns_11, message=FALSE, warning=FALSE}
# Add year and state as columns
      totalpop$Year <- year
      totalpop$State <- state_code
```

## Append to the main dataframe

```{r append_to_the_main_dataframe_12, message=FALSE, warning=FALSE}
# Append to the main dataframe
      total_pop_data <- bind_rows(total_pop_data, totalpop)
    }, error = function(e) {
      warning(paste("Failed for", state_code, "in", year, ":", e$message))
    })
  }
}
```

## Check the resulting dataframe

```{r check_the_resulting_dataframe_13, message=FALSE, warning=FALSE}
# Check the resulting dataframe
total_pop_data<- total_pop_data%>%  # pipeselect(-c("B01001_001M"))%>%  # pipe  rename(total_pop=B01001_001E,year = Year)
total_pop_data$GEOID <- sprintf("%011s",total_pop_data$GEOID)
```

## Combine things together

```{r combine_things_together_14, message=FALSE, warning=FALSE}
## Combine things together

df$State<- toupper(df$State)
```

## chaing block group code to have a leading zero

```{r chaing_block_group_code_to_have_a_leading_zero_15, message=FALSE, warning=FALSE}
#chaing block group code to have a leading zero
df$BlockGEOID<- sprintf("%015.0f", as.numeric(df$BlockGEOID))
```

## extracting 11 digits which indicates census tract level

```{r extracting_11_digits_which_indicates_census_tract_level_16, message=FALSE, warning=FALSE}
# extracting 11 digits which indicates census tract level
df$GEOID <- substr(df$BlockGEOID, 1, 11)
```

## group by to census block group level

```{r group_by_to_census_block_group_level_17, message=FALSE, warning=FALSE}
#group by to census block group level
DF <- df %>%  # pipe
# Group rows for downstream summaries
group_by(GEOID, year) %>%  # pipe
# Compute summary statistics
summarise(
    Educational_Services = sum(`Educational Services`, na.rm = TRUE),
    Health_Care = sum(`Health Care`, na.rm = TRUE),
    Others = sum(`Accommodation & Food Services`, na.rm = TRUE),
    .groups = 'drop'
  )%>%  # pipefilter(year>=2002)%>%  # pipefull_join(total_pop_data)%>%  # pipeselect(-c("NAME")) #need to join outer

state_year_remove <- DF %>%  # pipe
# Group rows for downstream summaries
group_by(State, year) %>%  # pipe
# Compute summary statistics
summarise(
    all_na = all(is.na(Educational_Services) & is.na(Health_Care) & is.na(Others)),
    .groups = "drop"
  ) %>%  # pipe
# Filter rows by conditions
filter(all_na) %>%  # pipe
# Select/reorder columns
select(State, year)
```

## Step 2: Filter out those combinations from DF

```{r step_2_filter_out_those_combinations_from_df_18, message=FALSE, warning=FALSE}
# Step 2: Filter out those combinations from DF
DF <- DF %>%  # pipe
  anti_join(state_year_remove, by = c("State", "year"))

DF$GEOID <- sprintf("%011s", DF$GEOID)
DF$GEOIDCN<-  substr(DF$GEOID, 1, 5)
```

## Define the types of interest

```{r define_the_types_of_interest_19, message=FALSE, warning=FALSE}
# Define the types of interest
types <- c("Health_Care", "Educational_Services", "Others")
states <- unique(DF$State)
```

## Ensure 'year' is numeric if not already converted

```{r ensure_year_is_numeric_if_not_already_converted_20, message=FALSE, warning=FALSE}
# Ensure 'year' is numeric if not already converted
DF$year <- as.numeric(DF$year)
unique_years <- unique(DF$year)
```

## make it as a long table

```{r make_it_as_a_long_table_21, message=FALSE, warning=FALSE}
#make it as a long table
DF_long <- as.data.frame(DF) %>%  # pipe
  pivot_longer(
    cols = c(Educational_Services, Health_Care, Others),
    names_to = "TYPE",
    values_to = "IndustryEmployment"
  )%>%  # pipe
# Create or modify columns
mutate(total_pop = ifelse(is.na(total_pop), 0, total_pop))%>%  # pipe
# Create or modify columns
mutate(IndustryEmployment = ifelse(is.na(IndustryEmployment), 0, IndustryEmployment))
```

## Initialize an empty dataframe to store results

```{r initialize_an_empty_dataframe_to_store_results_22, message=FALSE, warning=FALSE}
# Initialize an empty dataframe to store results
gini_results <- data.frame(State = character(), Year = integer(), Type = character(), Gini = numeric(),  stringsAsFactors = FALSE)
```

## Loop through each year, type, and state to calculate Gini coefficient

```{r loop_through_each_year_type_and_state_to_calculate_gini_coefficient_23, message=FALSE, warning=FALSE}
# Loop through each year, type, and state to calculate Gini coefficient
for (current_year in unique_years) {
  print(current_year )
    for (state in states) {
      DFfilter <- DF_long %>%  # pipe filter(year == .env$current_year, State == state) %>%  # pipe
# Filter rows by conditions
filter(!is.na(IndustryEmployment), !is.na(total_pop), total_pop != 0)
      # Calculate Gini coefficient if DFfilter is not empty
      if (nrow(DFfilter) > 1) {
        gini_value <- Gini(weights = DFfilter$total_pop, DFfilter$IndustryEmployment,unbiased=FALSE)
      } else {
        gini_value <- NA  # Assign NA if data is insufficient
      }
      # Create a temporary dataframe to store the results of this iteration
      temp_results <- data.frame(State = state, Year = current_year, Gini = gini_value[1], stringsAsFactors = FALSE)
      row.names(temp_results) <- NULL
```

## Bind the temporary results to the main results dataframe

```{r bind_the_temporary_results_to_the_main_results_dataframe_24, message=FALSE, warning=FALSE}
# Bind the temporary results to the main results dataframe
      gini_results <- rbind(gini_results, temp_results)
    }
}

gini_results <- gini_results %>%  # pipe
  rename(geo_level = State,
         year = Year,
         gini = Gini)

gini_results$date <- as.Date(paste0(gini_results$year, "-01-01"))
```

## Adjust sups codes to fips

```{r adjust_sups_codes_to_fips_25, message=FALSE, warning=FALSE}
## Adjust sups codes to fips
```

## Create a lookup dataframe of state abbreviations and FIPS codes

```{r create_a_lookup_dataframe_of_state_abbreviations_and_fips_codes_26, message=FALSE, warning=FALSE}
# Create a lookup dataframe of state abbreviations and FIPS codes
state_fips_lookup <- data.frame(
  state_abbrev = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
                   "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
                   "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",
                   "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",
                   "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "DC"),
  fips = sprintf("%02d", c(1, 2, 4, 5, 6, 8, 9, 10, 12, 13,
                           15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
                           25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
                           35, 36, 37, 38, 39, 40, 41, 42, 44, 45,
                           46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 11))
)
```

## Join your data to get FIPS codes

```{r join_your_data_to_get_fips_codes_27, message=FALSE, warning=FALSE}
# Join your data to get FIPS codes

gini_results <- gini_results %>%  # pipe
# Join datasets with left_join
left_join(state_fips_lookup, by = c("geo_level" = "state_abbrev")) %>%  # pipe
# Select/reorder columns
select(gini, date, fips)

gini_results_state <- gini_results %>%  # pipe
  rename(geo_level = fips)

gini_results_state$geo_level <- sprintf("%02d", as.numeric(gini_results_state$geo_level))
gini_results_state$geo_level <- paste0("state", gini_results_state$geo_level)
```

## NATION

```{r nation_28, message=FALSE, warning=FALSE}
#NATION
gini_results <- data.frame(State = character(), Year = integer(), Type = character(), Gini = numeric(),  stringsAsFactors = FALSE)

for (current_year in unique_years) {
  print(current_year )
  DFfilter <- DF_long %>%  # pipe filter(year == .env$current_year) %>%  # pipe
# Filter rows by conditions
filter(!is.na(IndustryEmployment), !is.na(total_pop), total_pop != 0)
  # Calculate Gini coefficient if DFfilter is not empty
  if (nrow(DFfilter) > 1) {
    gini_value <- Gini(weights = DFfilter$total_pop, DFfilter$IndustryEmployment,unbiased=FALSE)
  } else {
    gini_value <- NA  # Assign NA if data is insufficient
  }
  # Create a temporary dataframe to store the results of this iteration
  temp_results <- data.frame(State = "national", Year = current_year, Gini = gini_value[1], stringsAsFactors = FALSE)
  row.names(temp_results) <- NULL
```

## Bind the temporary results to the main results dataframe

```{r bind_the_temporary_results_to_the_main_results_dataframe_29, message=FALSE, warning=FALSE}
# Bind the temporary results to the main results dataframe
  gini_results <- rbind(gini_results, temp_results)
}

gini_results <- gini_results %>%  # pipe
  rename(geo_level = State,
         year = Year,
         gini = Gini)

gini_results$date <- as.Date(paste0(gini_results$year, "-01-01"))

gini_results <- gini_results %>%  # pipe
# Select/reorder columns
select(gini, date, geo_level)

gini_results <- rbind(gini_results_state,gini_results) %>%  # pipe
# Filter rows by conditions
filter(!is.na(gini))


write.csv(gini_results, "./app_data/metrics_state_care_gini.csv", row.names = FALSE)
```
