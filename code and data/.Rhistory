df <- read.csv(sel_file)
assign(name, df)
}
View(provider_datum)
View(provider_category)
dbGetQuery(cn, "delete from raw.activity_formal cascade;")
# connect to database
source("db_connect.R")
source("load_defaults.R")
# read all csv files into environment
files <- list.files(path = "./app_data", pattern = ".csv", full.names = TRUE)
for(sel_file in files){
name <- sel_file |>
str_replace_all("./app_data/", "") |>
str_replace_all(".csv", "")
df <- read.csv(sel_file)
assign(name, df)
}
dbGetQuery(cn, "delete from raw.activity_formal cascade;")
dbWriteTable(cn, SQL("raw.activity_formal"), activity_formal, append = TRUE)
dbWriteTable(cn, SQL("raw.activity_formal_datum"), activity_formal_datum, append = TRUE)
dbExecute(cn, "DELETE FROM raw.provider_category;")
dbWriteTable(cn, SQL("raw.provider_category"), provider_category, append = TRUE)
dbExecute(cn, "DELETE FROM raw.provider_datum;")
dbExecute(cn, "DELETE FROM raw.provider;")
provider <- provider %>%
rename(geo = geo_level)
dbWriteTable(cn, SQL("raw.provider"), provider, append = TRUE)
colnames(provider)
unique(provider$subcategory_id)
gc()
# connect to database
source("db_connect.R")
source("load_defaults.R")
# read all csv files into environment
files <- list.files(path = "./app_data", pattern = ".csv", full.names = TRUE)
for(sel_file in files){
name <- sel_file |>
str_replace_all("./app_data/", "") |>
str_replace_all(".csv", "")
df <- read.csv(sel_file)
assign(name, df)
}
dbGetQuery(cn, "delete from raw.activity_formal cascade;")
dbWriteTable(cn, SQL("raw.activity_formal"), activity_formal, append = TRUE)
dbWriteTable(cn, SQL("raw.activity_formal_datum"), activity_formal_datum, append = TRUE)
dbExecute(cn, "DELETE FROM raw.provider_category;")
dbWriteTable(cn, SQL("raw.provider_category"), provider_category, append = TRUE)
dbExecute(cn, "DELETE FROM raw.provider_datum;")
dbExecute(cn, "DELETE FROM raw.provider;")
provider <- provider %>%
rename(geo = geo_level)
dbWriteTable(cn, SQL("raw.provider"), provider, append = TRUE)
provider_datum <- provider_datum %>%
rename(geo = geo_level) %>%
select(category_id, subcategory_id, care_type, care_focus, provider_attention, geo, provision_interval, population) %>%
filter(care_focus != "none")
dbWriteTable(cn, SQL("raw.provider_datum"), provider_datum, append = TRUE)
dbGetQuery(cn, "delete from raw.activity_informal cascade;")
activity_informal <- activity_informal %>%
rename(geo = geo_level) %>%
mutate(across(everything(), ~na_if(.x, "NULL"))) %>%     # convert "NULL" strings to NA
mutate(across(everything(), ~na_if(.x, "")))
dbWriteTable(cn, SQL("raw.activity_informal"), activity_informal, append = TRUE)
activity_informal_datum <- activity_informal_datum %>%
rename(geo = geo_level)
dbWriteTable(cn, SQL("raw.activity_informal_datum"), activity_informal_datum, append = TRUE)
dbGetQuery(cn, "delete from raw.market_datum cascade;")
dbGetQuery(cn, "delete from raw.market cascade;")
dbWriteTable(cn, SQL("raw.market"), market, append = TRUE)
dbWriteTable(cn, SQL("raw.market_datum"), market_datum, append = TRUE)
dbGetQuery(cn, "delete from raw.care_provider_datum cascade;")
dbGetQuery(cn, "delete from raw.care_provider_population cascade;")
dbWriteTable(cn, SQL("raw.care_provider_datum"), care_provider_datum, append = TRUE)
dbWriteTable(cn, SQL("raw.care_provider_population"), care_provider_population, append = TRUE)
metric_group <- read_excel("./app_data/metric_tables.xlsx", sheet = "metric_group")
dbGetQuery(cn, "delete from raw.metric_group cascade;")
dbWriteTable(cn, SQL("raw.metric_group"), metric_group, append = TRUE)
metric <- read_excel("./app_data/metric_tables.xlsx", sheet = "metric")
dbGetQuery(cn, "delete from raw.metric cascade;")
dbWriteTable(cn, SQL("raw.metric"), metric, append = TRUE)
metrics_state_care_gini <- metrics_state_care_gini |>
rename("care-gini" = "gini")
metric_datum <- bind_rows(
metrics_care_ratio,
metrics_formal,
metrics_informal,
metrics_state_care_gini,
metrics_sandwich_generation
) |>
pivot_longer(
cols = -c(date, geo_level, category_id, subcategory_id)
) %>%
filter(!is.na(value)) %>%
filter(name != "total_weight")
metric_datum <- metric_datum |>
mutate(
category_id = if_else(is.na(category_id), "overall", category_id),
subcategory_id = if_else(is.na(subcategory_id), "overall", subcategory_id),
metric_id = name,
category_id = str_replace_all(
category_id, "[^a-zA-Z0-9]+", "-") |>
str_to_lower() |>
coalesce("overall"),
subcategory_id = str_replace_all(
subcategory_id,
"[^a-zA-Z0-9]+", "-") |>
str_to_lower(),
type = case_when(
name %in% c("care_ratio", "care-gini") ~ "ratio",
name %in% c("formal_value", "informal_value") ~ "dollar",
name %in% c(
"formal_care_labor_force_proportion",
"formal_care_time_proportion",
"formal_value_proportion",
"informal_care_time_proportion",
"informal_care_labor_force_proportion",
"informal_value_proportion",
"sandwich_population_proportion"
) ~ "percent",
name %in% c(
"formal_care_time",
"informal_care_time",
"sandwich_time_median"
) ~ "interval",
TRUE ~ "count"),
metric_id = metric_id %>%
str_replace_all("_", "-") %>%
str_remove("-proportion$") %>%
str_remove("-median$") %>%
str_remove("-total$"),
value = case_when(
str_detect(name, "time") & subcategory_id == "current" ~ value/60,
TRUE ~ value
)
) |>
select(metric_id, geo_level, category_id, subcategory_id, type, date, value) |>
arrange(metric_id, geo_level, category_id, subcategory_id, type, date) |>
filter(subcategory_id != 'other') %>%
rename(geo = geo_level) %>%
filter(metric_id != "total-weight") |>
filter(!is.na(value))
metric_category <- bind_rows(
metric_datum |> select(category_id) |> rename(id = category_id),
metric_datum |> select(subcategory_id) |> rename(id = subcategory_id)
) |>
unique() |>
mutate(
name = str_to_title(id),
name = case_when(name == "Gender-Parent" ~ "By Gender & Parenthood", TRUE ~ name),
order = case_when(
id == "overall" ~ 0,
id == "gender-parent" ~ 3,
id == "mothers" ~ 1,
id == "fathers" ~ 2,
id == "non-mothers" ~ 3,
id == "non-fathers" ~ 4,
id == "current" ~ 0,
id == "trend" ~ 1
)
)
dbGetQuery(cn, "delete from raw.metric_datum cascade;")
dbGetQuery(cn, "delete from raw.metric_category cascade;")
dbWriteTable(cn, SQL("raw.metric_category"), metric_category, append = TRUE)
dbWriteTable(cn, SQL("raw.metric_datum"), metric_datum, append = TRUE)
# List of all ages from 0 to 85
age_list <- data.frame(age = seq(0, 85, by = 1))
# Load and clean the data
age_data <- read.csv("./data/CSV/ASECdata.csv") |>
select(YEAR, AGE, ASECWT) |>
clean_names()
source("load_defaults.R")
setwd("C:/Users/sc363/OneDrive/Work Items/TheCareBoard/Live Version/code and data")
# List of all ages from 0 to 85
age_list <- data.frame(age = seq(0, 85, by = 1))
# Load and clean the data
age_data <- read.csv("./data/CSV/ASECdata.csv") |>
select(YEAR, AGE, ASECWT) |>
clean_names()
# Loop through each year and calculate population by age
age_modified_all <- age_data |>
group_by(year, age) |>
summarise(population = sum(asecwt, na.rm = TRUE), .groups = "drop") |>
right_join(expand.grid(age = age_list$age, year = unique(age_data$year)),
by = c("year", "age")) |>
mutate(population = coalesce(population, 0)) |>
arrange(year, age)
write.csv(age_modified_all, "./data/CSV/market.csv", row.names = FALSE)
write_dta(age_modified_all, "./data/DTA/market.dta")
write_dta(age_modified_all, "./data/DTA/market.dta")
asec <- read.csv("./data/CSV/ASECdata.csv") |>
filter(AGE >= 18) |>
select(YEAR, OCC2010, empstat, occ_label, UHRSWORKT, EARNWT, INCWAGE,
occ_care_focus, ASECWT, sex, gender_parent, poverty, empstat, race_ethnicity, prime_age) |>
clean_names()
cp_population_ext <- asec |>
mutate(
gender = str_to_lower(sex),
provider_status = case_when(
gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
TRUE ~ "other")
) |>
summarise(
population = sum(asecwt),
.by = c(year, prime_age, race_ethnicity, empstat, poverty,  gender, provider_status)
) |>
arrange(year, prime_age, race_ethnicity, empstat, poverty,  gender, provider_status)
write.csv(cp_population_ext, "./data/CSV/care_provider_population.csv",
row.names = FALSE)
write_dta(cp_population_ext, "./data/DTA/care_provider_population.dta")
asec <- read.csv("./data/CSV/ASECdata.csv") |>
filter(AGE >= 18) |>
select(YEAR, OCC2010, empstat, occ_label, UHRSWORKT, EARNWT, INCWAGE,
occ_care_focus, ASECWT, sex, gender_parent, poverty, empstat, race_ethnicity, prime_age) |>
clean_names()
# create columns required by the app
cp_formal <- asec |>
filter(empstat == "Employed") |>
mutate(
gender = str_to_lower(sex),
provider_status = case_when(
gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
TRUE ~ "other"
),
time_use = ifelse(occ_care_focus == "none", "non_care", "care"),
care_focus = occ_care_focus,
care_type	= "formal",
provider_attention = "active"
)
# summarise formal stats
cp_formal <- cp_formal %>%
filter(uhrsworkt != 997) |>
mutate(uhrsworkt = ifelse(uhrsworkt == 999, 0, uhrsworkt)) |>
summarise(
population = sum(asecwt),
provision_interval = sum(uhrsworkt/7*60*asecwt),
.by = c(year, prime_age, race_ethnicity, empstat, poverty, gender, provider_status, time_use, care_type,
care_focus, provider_attention)
)
##### INFORMAL
atus <- read.csv("./data/CSV/ATUSdata.csv") |>
filter(activity != "Formal Work") |>
filter(AGE >= 18) |>
select(YEAR, CASEID, WT06, sex, gender_parent, act_care_focus,
DURATION, SCC_ALL_LN, SEC_ALL_LN, prime_age, race_ethnicity, empstat, poverty) |>
clean_names()
# prep secondary care time
cp_informal <- atus |>
pivot_longer(
cols = c(duration, scc_all_ln, sec_all_ln),
names_to = "metric",
values_to = "duration"
) |>
filter(!is.na(duration))
# create columns required by the app
cp_informal <- cp_informal |>
mutate(
gender = str_to_lower(sex),
provider_status = case_when(
gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
TRUE ~ "without_children"
),
care_type	= "informal",
provider_attention = case_when(
metric == "scc_all_ln" ~ "passive_child",
metric == "sec_all_ln" ~ "passive_elder",
TRUE ~ "active"
),
care_focus = case_when(
metric == "scc_all_ln" ~ "developmental",
metric == "sec_all_ln" ~ "health",
act_care_focus == "non-care" ~ "none",
TRUE ~ act_care_focus
),
time_use = ifelse(care_focus == "none", "non_care", "care"),
weight = wt06/365
)
# summarise formal stats
cp_informal <- cp_informal |>
summarise(
total_time = sum(duration),
.by = c(year, caseid, race_ethnicity, empstat, poverty,prime_age, weight, gender, provider_status, time_use,
care_type, care_focus, provider_attention)
) |>
summarise(
provision_interval = sum(total_time*weight/5),
population = sum(weight/5),
.by = c(year, prime_age, race_ethnicity, empstat, poverty, gender, provider_status, time_use,
care_type, care_focus, provider_attention)
)
cp_combined <- bind_rows(
cp_formal,
cp_informal
) |>
arrange(year, care_type, time_use, prime_age, race_ethnicity, empstat, poverty, gender, provider_status, care_focus)
write.csv(cp_combined, "./data/CSV/care_provider_data.csv",
row.names = FALSE)
write_dta(cp_combined, "./data/DTA/care_provider_data.dta")
View(cp_combined)
asec <- read.csv("./data/CSV/ASECdata.csv") |>
filter(AGE >= 18) |>
select(YEAR, OCC2010, empstat, occ_label, UHRSWORKT, EARNWT, INCWAGE,
occ_care_focus, ASECWT, sex, gender_parent, poverty, empstat, race_ethnicity, prime_age) |>
clean_names()
# create columns required by the app
cp_formal <- asec |>
filter(empstat == "Employed") |>
mutate(
gender = str_to_lower(sex),
provider_status = case_when(
gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
gender_parent %in% c("Non-Mothers", "Non-Fathers") ~ "without_children",
TRUE ~ "other"
),
time_use = ifelse(occ_care_focus == "none", "non_care", "care"),
care_focus = occ_care_focus,
care_type	= "formal",
provider_attention = "active"
)
# summarise formal stats
cp_formal <- cp_formal %>%
filter(uhrsworkt != 997) |>
mutate(uhrsworkt = ifelse(uhrsworkt == 999, 0, uhrsworkt)) |>
summarise(
population = sum(asecwt),
provision_interval = sum(uhrsworkt/7*60*asecwt),
.by = c(year, prime_age, race_ethnicity, empstat, poverty, gender, provider_status, time_use, care_type,
care_focus, provider_attention)
)
##### INFORMAL
atus <- read.csv("./data/CSV/ATUSdata.csv") |>
filter(activity != "Formal Work") |>
filter(AGE >= 18) |>
select(YEAR, CASEID, WT06, sex, gender_parent, act_care_focus,
DURATION, SCC_ALL_LN, SEC_ALL_LN, prime_age, race_ethnicity, empstat, poverty) |>
clean_names()
# prep secondary care time
cp_informal <- atus |>
pivot_longer(
cols = c(duration, scc_all_ln, sec_all_ln),
names_to = "metric",
values_to = "duration"
) |>
filter(!is.na(duration))
# create columns required by the app
cp_informal <- cp_informal |>
mutate(
gender = str_to_lower(sex),
provider_status = case_when(
gender_parent %in% c("Mothers", "Fathers") ~ "with_children",
TRUE ~ "without_children"
),
care_type	= "informal",
provider_attention = case_when(
metric == "scc_all_ln" ~ "passive_child",
metric == "sec_all_ln" ~ "passive_elder",
TRUE ~ "active"
),
care_focus = case_when(
metric == "scc_all_ln" ~ "developmental",
metric == "sec_all_ln" ~ "health",
act_care_focus == "non-care" ~ "none",
TRUE ~ act_care_focus
),
time_use = ifelse(care_focus == "none", "non_care", "care"),
weight = wt06/365
)
# summarise formal stats
cp_informal <- cp_informal |>
summarise(
total_time = sum(duration),
.by = c(year, caseid, race_ethnicity, empstat, poverty,prime_age, weight, gender, provider_status, time_use,
care_type, care_focus, provider_attention)
) |>
summarise(
provision_interval = sum(total_time*weight/5),
population = sum(weight),
.by = c(year, prime_age, race_ethnicity, empstat, poverty, gender, provider_status, time_use,
care_type, care_focus, provider_attention)
)
cp_combined <- bind_rows(
cp_formal,
cp_informal
) |>
arrange(year, care_type, time_use, prime_age, race_ethnicity, empstat, poverty, gender, provider_status, care_focus)
write.csv(cp_combined, "./data/CSV/care_provider_data.csv",
row.names = FALSE)
write_dta(cp_combined, "./data/DTA/care_provider_data.dta")
gc()
formal <- read.csv("./app_data/activity_formal.csv")
source("load_defaults.R")
View(formal)
formal_datum <- read.csv("./app_data/activity_formal_data.csv")
a
formal_datum <- read.csv("./app_data/activity_formal_data.csv")
formal_datum <- read.csv("./app_data/activity_formal_data.csv")
formal <- read.csv("./app_data/activity_formal.csv")
formal_datum <- read.csv("./app_data/activity_formal_data.csv")
formal_datum <- read.csv("./app_data/activity_formal_datum.csv")
informal <- read.csv("./app_data/activity_informal.csv")
informal_datum <- read.csv("./app_data/activity_informal_datum.csv")
View(formal)
View(formal_datum)
View(formal)
View(formal_datum)
View(formal)
summary(formal)
summary(formal_datum)
formal_datum <- formal_datum %>%
left_join(formal %>% select(id, name,  geo, median_wage),
by = c("activity_id" = "id", "geo" = "geo"))
View(formal_datum)
formal <- read.csv("./app_data/activity_formal.csv")
formal_datum <- read.csv("./app_data/activity_formal_datum.csv")
formal_datum <- formal_datum %>%
left_join(formal %>% select(id, name,  geo, median_wage),
by = c("activity_id" = "id", "geo" = "geo")) %>%
select(name, geo, median_wage, population, provision_interval)
View(informal)
View(informal_datum)
informal_datum <- formal_datum %>%
left_join(formal %>% select(id, name,  geo_level, median_wage),
by = c("activity_id" = "id", "geo_level" = "geo_level"))
colnames(informal)
colnames(informal_datum)
informal_datum <- formal_datum %>%
left_join(formal %>% select(id, name, geo_level, median_wage),
by = c("activity_id" = "id", "geo_level" = "geo_level"))
informal_datum <- formal_datum %>%
left_join(formal %>% select(id, name, geo_level, median_wage),
by = c("activity_id" = "id", "geo_level"))
informal_datum <- informal_datum %>%
left_join(informal %>% select(id, name, geo_level, median_wage),
by = c("activity_id" = "id", "geo_level"))
informal <- read.csv("./app_data/activity_informal.csv")
informal_datum <- read.csv("./app_data/activity_informal_datum.csv")
informal_datum <- informal_datum %>%
left_join(informal %>% select(id, name, geo_level, median_wage),
by = c("activity_id" = "id", "geo_level")) %>%
select(name, geo_level, median_wage, population, provision_interval)
formal <- read.csv("./app_data/activity_formal.csv")
formal_datum <- read.csv("./app_data/activity_formal_datum.csv")
formal_datum <- formal_datum %>%
left_join(formal %>% select(id, name,  geo, median_wage),
by = c("activity_id" = "id", "geo" = "geo")) %>%
select(name, geo, median_wage, population, provision_interval) %>%
mutate(Type = "Paid")
informal <- read.csv("./app_data/activity_informal.csv")
informal_datum <- read.csv("./app_data/activity_informal_datum.csv")
informal_datum <- informal_datum %>%
left_join(informal %>% select(id, name, geo_level, median_wage),
by = c("activity_id" = "id", "geo_level")) %>%
select(name, geo_level, median_wage, population, provision_interval) %>%
mutate(Type = "Unpaid")
informal_datum <- informal_datum %>%
left_join(informal %>% select(id, name, geo_level, median_wage),
by = c("activity_id" = "id", "geo_level")) %>%
select(name, geo_level, median_wage, population, provision_interval) %>%
mutate(Type = "Unpaid",
geo = geo_level)
informal <- read.csv("./app_data/activity_informal.csv")
informal_datum <- read.csv("./app_data/activity_informal_datum.csv")
informal_datum <- informal_datum %>%
left_join(informal %>% select(id, name, geo_level, median_wage),
by = c("activity_id" = "id", "geo_level")) %>%
select(name, geo_level, median_wage, population, provision_interval) %>%
mutate(Type = "Unpaid") %>%
rename("geo" = "geo_level")
View(informal_datum)
View(formal_datum)
activities <- rbind(formal_datum, informal_datum)
formal <- read.csv("./app_data/activity_formal.csv")
formal_datum <- read.csv("./app_data/activity_formal_datum.csv")
formal_datum <- formal_datum %>%
left_join(formal %>% select(id, name,  geo, median_wage),
by = c("activity_id" = "id", "geo" = "geo")) %>%
select(name, geo, median_wage, population, provision_interval) %>%
mutate(Type = "Paid")
informal <- read.csv("./app_data/activity_informal.csv")
informal_datum <- read.csv("./app_data/activity_informal_datum.csv")
informal_datum <- informal_datum %>%
left_join(informal %>% select(id, name, geo_level, median_wage),
by = c("activity_id" = "id", "geo_level")) %>%
select(name, geo_level, median_wage, population, provision_interval) %>%
mutate(Type = "Unpaid") %>%
rename("geo" = "geo_level")
activities <- rbind(formal_datum, informal_datum)
write.csv(activities, "./data/CSV/activities.csv",
row.names = FALSE)
write_dta(activities, "./data/DTA/activities.dta")
care_ratio <- read.csv("./app_data/activity_formal.csv")
View(care_ratio)
care_ratio <- read.csv("./app_data/care_ratio.csv")
care_ratio <- read.csv("./app_data/metrics_care_ratio.csv")
View(care_ratio)
care_ratio <- read.csv("./app_data/metrics_care_ratio.csv")
write.csv(care_ratio, "./data/CSV/care_ratio.csv",
row.names = FALSE)
write_dta(care_ratio, "./data/DTA/care_ratio.dta")
gini <- read.csv("./app_data/metrics_care_gini.csv")
care_ratio <- read.csv("./app_data/metrics_state_care_ratio.csv")
gini <- read.csv("./app_data/metrics_state_care_gini.csv")
View(gini)
gini <- read.csv("./app_data/metrics_state_care_gini.csv")
write.csv(care_ratio, "./data/CSV/care_ratio.csv",
row.names = FALSE)
gini <- read.csv("./app_data/metrics_state_care_gini.csv")
write.csv(gini, "./data/CSV/gini.csv",
row.names = FALSE)
write_dta(gini, "./data/DTA/gini.dta")
